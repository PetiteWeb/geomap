Сайт разработан на языке программированиия JavaScript.
В качествве инструментов разработки используется стек MERN (Mongo React Express Node) - это инструменты для разработки fullstack приложения исключительно с поддержкой JavaScript языка.

M - MongoDB (БД) - документированная База Данных (работает на основе документов, которые сохраняют данные в виде BSON-объектов (бинарные javascript объекты), которые по логике и синтаксису похожи на JS, что делает использование Mongo максимально комфортным.
E - Express.js (Сервер) - серверная библиотека, которая используется для запуска проекта и отображения его в браузере, а так же для взаимодействия сайта с Базой Данных.
R - React.js (Клиент) - библиотека JS, которая создает веб-сайт при помощи JavaScript-конструкций и выводит многофайловую систему в один минимизированный файл, на основе которого работает весь сайт.
N - Node.js - среда разработки сервера на JavaScript - запускает все кусочки (Mongo, React, Express) в один готовый продукт

Основной точкой входа является файл index.js - здесь описываются настройки сервера и распределение путей для:
- клиентской части
app.use(express.static("./dist"));
- взаимодействия с БД
app.use("/api", require("./api/routes"));

Внутри папки dist лежит один большой файл bundle.js - он создается библиотекой React.js и включает в себя все, что было написано в клиентской части

Внутри папки api лежат настройки для работы с БД
bd.js - подключение к бд
models - папка описывает модели хранения данных в базе в виде объекта. Для каждой модели - свой файл.
routes - в файлах этой папки описываются пути, по которым осуществляются запросы к БД и что делать с этими данными в дельнейшем:
    router.get("/divisions/show/:type"... )  - получить геоданные определенного типа (страны, районы, округа)
    router.get("/types"...) - получить из БД все уникальные типы геолокаций (страны, районы, округа), которые доступны в БД
    router.post("/divisions/add"...) - добавить в БД один географический объект (район, округ, границы города...)
    router.patch("/divisions/update/:id"...) - изменить информацию об одном географическом объекте по его уникальному ключу
    router.delete("/divisions/delete/:id"...) - удалиь один географический объект

На что обратить внимание:
    меоды передачи данных соответствуют запросам к БД
    get - получить
    post - создать/добавить
    patch - модифицировать
    delete - удалить

Клиентская часть: React.js

Все, что относится к клиентской части лежит в папке src
Точка входа - файл Main.js - в нем находятся все настройки, хранятся данные, которые используются в других файлах - это называется контекст
<Ctx.Provider value={{
            path: path,
            map: map,
            setMap: setMap,
            divisions: div,
            setDivisions: setDiv,
            types: types,
            setTypes: setTypes,
            mapData: mapData,
            setMapData: setMapData,
            dataChange: dataChange,
            setDataChange: setDataChange,
            round: round,
            setRound: setRound,
            src: src,
            srcUpd: srcUpd,
            setSrcUpd: setSrcUpd
        }}>...</Ctx.Provider>
Тут мы связываем названия, к которым будем обращаться (слева) с переменными, на которые ссылаемся (справа) - получается, что если из другого файла вызват переменную map, файл обратится к глобальной переменной map - ведь у нас карта одна, с ней мы и работаем

pages - страницы сайта - их всего две:
Home - сама карта
Admin - возможность добавления и редактирование данных (админка)

Для отрисовки карты используется библиотека MapboxGL, которая позволяет использовать свои тайловые сервисы для отображения карт разного представления (физическая/светлая/темная...), а так же работать с геоданными, отображая их на карте (тайлах)

Папка components - небольшие кусочки сайта, каждый из которых отвечает за свою логику (шапка, панель навигации, форма добавления данных...)

БД и проект находятся на удаленном VPS-хостинге, на операционной системе Ubuntu 20.04
Доступ к хостингу можно получить по ssh-соединению через командную строку
ssh -p 22 root@95.163.237.252 => Enter => и потом вставляем пароль из почты (мы его если что не увидим) => Enter

Cайт находится в папке /var/www/r-i-m.su
Переместиться туда можно командой
cd /var/www/r-i-m.su

ls - посмотреть все файлы в папке

nano файл - редактировать файл, пример:
nano index.js

Выйти из редактирования комбинация Ctrl + X

